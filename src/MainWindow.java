
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeriesCollection;
import javax.sound.sampled.*;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.ui.RectangleInsets;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Tomek
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        initLabels();
        soundMaker = new SoundMaker();
        soundMaker.setfFreq(this.sldFrequency.getValue());
        soundMaker.setVolumeLevel(this.sldVolume.getValue());
        exam = new Exam("Badanie", this.sldAge.getValue());
        exam.setFreqCoef((int)this.spnFreqCoef.getValue());
        exam.setVolCoef((int)this.spnVolCoef.getValue());
        drawChart();
    }
    SoundMaker soundMaker;
    Exam exam;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDialogCalibration = new javax.swing.JDialog();
        btmPlayHands = new javax.swing.JButton();
        jButtonCloseCalibration = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        pnlChart = new javax.swing.JPanel();
        tpnOptions = new javax.swing.JTabbedPane();
        pnlExam = new javax.swing.JPanel();
        sldFrequency = new javax.swing.JSlider();
        btnBeginExam = new javax.swing.JButton();
        lblFreq = new javax.swing.JLabel();
        btnConfirm = new javax.swing.JButton();
        sldVolume = new javax.swing.JSlider();
        lblVolume = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblEarInfo = new javax.swing.JLabel();
        lblExamState = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtExamName = new javax.swing.JTextField();
        btnRefuse = new javax.swing.JButton();
        btnRepeat = new javax.swing.JButton();
        btnCalibration = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        spnFreqCoef = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spnVolCoef = new javax.swing.JSpinner();
        lblAge = new javax.swing.JLabel();
        sldAge = new javax.swing.JSlider();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jDialogCalibration.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialogCalibration.setTitle("Kalibracja głośności");
        jDialogCalibration.setAlwaysOnTop(true);
        jDialogCalibration.setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        jDialogCalibration.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jDialogCalibration.setIconImage(null);
        jDialogCalibration.setMinimumSize(new java.awt.Dimension(670, 267));
        jDialogCalibration.setModal(true);
        jDialogCalibration.setResizable(false);
        jDialogCalibration.setType(java.awt.Window.Type.POPUP);

        btmPlayHands.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btmPlayHands.setText("Odtwórz dźwięk");
        btmPlayHands.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btmPlayHandsMouseClicked(evt);
            }
        });
        btmPlayHands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmPlayHandsActionPerformed(evt);
            }
        });

        jButtonCloseCalibration.setText("OK, gotowe");
        jButtonCloseCalibration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonCloseCalibrationMouseClicked(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Do przeprowadzenia badania wymagana jest kalibracja głośności.\nJak to zrobić?\n1. Potrzyj dłońmi zaraz przed nosem.\n   (W ten sposób otrzymasz dźwięk referencyjny o natężeniu ~65dB)\n2. Załóż słuchawki i naciskając przycisk poniżej porównaj natężenie dźwięku.\n3. Dopasuj głośność suwakiem systemowym lub pokrętłem na słuchawkach.\n   (Tak, żeby dźwięk pocierania rąk i ten słyszany ze słuchawek miały takie samo natężenie)\n4. Procedurę możesz powtórzyć kilka razy dla uzyskania lepszego dopasowania.");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setEnabled(false);
        jTextArea1.setFocusable(false);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jDialogCalibrationLayout = new javax.swing.GroupLayout(jDialogCalibration.getContentPane());
        jDialogCalibration.getContentPane().setLayout(jDialogCalibrationLayout);
        jDialogCalibrationLayout.setHorizontalGroup(
            jDialogCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogCalibrationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCloseCalibration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btmPlayHands, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogCalibrationLayout.setVerticalGroup(
            jDialogCalibrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialogCalibrationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btmPlayHands, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCloseCalibration))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlChart.setBackground(new java.awt.Color(200, 200, 230));

        javax.swing.GroupLayout pnlChartLayout = new javax.swing.GroupLayout(pnlChart);
        pnlChart.setLayout(pnlChartLayout);
        pnlChartLayout.setHorizontalGroup(
            pnlChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlChartLayout.setVerticalGroup(
            pnlChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pnlExam.setMinimumSize(new java.awt.Dimension(247, 555));
        pnlExam.setName(""); // NOI18N

        sldFrequency.setMaximum(22000);
        sldFrequency.setMinimum(8);
        sldFrequency.setMinorTickSpacing(100);
        sldFrequency.setOrientation(javax.swing.JSlider.VERTICAL);
        sldFrequency.setPaintTicks(true);
        sldFrequency.setToolTipText("");
        sldFrequency.setValue(4500);
        sldFrequency.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldFrequencyStateChanged(evt);
            }
        });

        btnBeginExam.setText("Rozpocznij badanie");
        btnBeginExam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBeginExamActionPerformed(evt);
            }
        });

        lblFreq.setText("lblFreq");

        btnConfirm.setBackground(new java.awt.Color(0, 255, 0));
        btnConfirm.setText("Słyszę");
        btnConfirm.setEnabled(false);
        btnConfirm.setMaximumSize(new java.awt.Dimension(81, 23));
        btnConfirm.setMinimumSize(new java.awt.Dimension(81, 23));
        btnConfirm.setPreferredSize(new java.awt.Dimension(81, 23));
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        sldVolume.setMinorTickSpacing(1);
        sldVolume.setOrientation(javax.swing.JSlider.VERTICAL);
        sldVolume.setPaintTicks(true);
        sldVolume.setToolTipText("");
        sldVolume.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldVolumeStateChanged(evt);
            }
        });

        lblVolume.setText("jLabel2");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("info"));

        lblEarInfo.setText("Badane ucho: Lewe");

        lblExamState.setText("Badanie...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEarInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblExamState)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblEarInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblExamState)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel2.setText("Nazwa badania:");

        txtExamName.setText("Badanie");

        btnRefuse.setBackground(new java.awt.Color(255, 0, 51));
        btnRefuse.setText("Nie słyszę");
        btnRefuse.setEnabled(false);
        btnRefuse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefuseActionPerformed(evt);
            }
        });

        btnRepeat.setBackground(new java.awt.Color(255, 255, 51));
        btnRepeat.setText("Odtwórz");
        btnRepeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepeatActionPerformed(evt);
            }
        });

        btnCalibration.setText("Kalibracja");
        btnCalibration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCalibrationMouseClicked(evt);
            }
        });
        btnCalibration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalibrationActionPerformed(evt);
            }
        });

        jLabel1.setText("Mnożnik częstotliwości:");

        spnFreqCoef.setValue(2);
        spnFreqCoef.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                spnFreqCoefPropertyChange(evt);
            }
        });

        jLabel3.setText("Skok głośności:");

        spnVolCoef.setValue(10);
        spnVolCoef.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnVolCoefStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlExamLayout = new javax.swing.GroupLayout(pnlExam);
        pnlExam.setLayout(pnlExamLayout);
        pnlExamLayout.setHorizontalGroup(
            pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExamLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlExamLayout.createSequentialGroup()
                        .addComponent(sldFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlExamLayout.createSequentialGroup()
                                .addComponent(sldVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtExamName)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(pnlExamLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spnFreqCoef, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlExamLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(pnlExamLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spnVolCoef, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlExamLayout.createSequentialGroup()
                                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnBeginExam, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(btnCalibration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnRepeat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlExamLayout.createSequentialGroup()
                                .addComponent(btnConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRefuse, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlExamLayout.createSequentialGroup()
                        .addComponent(lblFreq)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblVolume)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlExamLayout.setVerticalGroup(
            pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlExamLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFreq)
                    .addComponent(lblVolume))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlExamLayout.createSequentialGroup()
                        .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlExamLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtExamName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(spnFreqCoef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(spnVolCoef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(sldVolume, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlExamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRefuse, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRepeat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCalibration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBeginExam))
                    .addComponent(sldFrequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        tpnOptions.addTab("Badanie", pnlExam);

        lblAge.setText("Wiek: 0");

        sldAge.setMinorTickSpacing(1);
        sldAge.setPaintTicks(true);
        sldAge.setToolTipText("wiek badanego");
        sldAge.setValue(22);
        sldAge.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldAgeStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblAge, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sldAge, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tpnOptions)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sldAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlChart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tpnOptions))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void initLabels() {
        this.lblAge.setText("Wiek: " + Integer.toString(this.sldAge.getValue()));
        this.lblFreq.setText(Integer.toString(this.sldFrequency.getValue()));
        this.lblVolume.setText(Integer.toString(this.sldVolume.getValue()));
    }

    private void drawChart() {
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(exam.getDownLimitRange());
        dataset.addSeries(exam.getUpLimitRange());

        dataset.addSeries(exam.getLeftEar());
        dataset.addSeries(exam.getRightEar());

        //Tworzymy wykres XY
        JFreeChart chart = ChartFactory.createXYLineChart(
                "Wykres słyszalności",//Tytuł
                "x- Częstotliwość", // x-axis Opis
                "y- Głośność", // y-axis Opis
                dataset, // Dane
                PlotOrientation.VERTICAL, // Orjentacja wykresu /HORIZONTAL
                true, // pozkaż legende
                true, // podpowiedzi tooltips
                false
        );
        //Dodanie wykresu do panelu

        ChartPanel plot = new ChartPanel(chart);
        plot.setVisible(true);

        XYPlot xyplot = (XYPlot) chart.getPlot();
        XYDifferenceRenderer xydifferencerenderer = new XYDifferenceRenderer(Color.ORANGE, Color.ORANGE, false);
        xydifferencerenderer.setRoundXCoordinates(true);
        xyplot.setDomainCrosshairLockedOnData(true);
        xyplot.setRangeCrosshairLockedOnData(true);
        xyplot.setDomainCrosshairVisible(true);
        xyplot.setRangeCrosshairVisible(true);
        xyplot.setRenderer(xydifferencerenderer);
        xyplot.setBackgroundPaint(Color.lightGray);
        xyplot.setDomainGridlinePaint(Color.white);
        xyplot.setRangeGridlinePaint(Color.white);
        xyplot.setAxisOffset(new RectangleInsets(5D, 5D, 5D, 5D));
        
        xyplot.getRenderer().setSeriesStroke(0, new BasicStroke(3.0f));
        xyplot.getRenderer().setSeriesStroke(1, new BasicStroke(3.0f));
        xyplot.getRenderer().setSeriesStroke(2, new BasicStroke(5.0f));
        xyplot.getRenderer().setSeriesStroke(3, new BasicStroke(5.0f));
    
        xyplot.getRenderer().setSeriesPaint(0, Color.YELLOW);
        xyplot.getRenderer().setSeriesPaint(1, Color.RED);
        xyplot.getRenderer().setSeriesPaint(2, Color.BLUE);
        xyplot.getRenderer().setSeriesPaint(3, Color.CYAN);
        
        NumberAxis domainAxis = new LogarithmicAxis("Częstotliwość");
        NumberAxis rangeAxis = new NumberAxis("Głośność");
        xyplot.setDomainAxis(domainAxis);
        xyplot.setRangeAxis(rangeAxis);
        xyplot.setForegroundAlpha(0.5F);

        pnlChart.setLayout(new java.awt.BorderLayout());
        pnlChart.add(plot, BorderLayout.CENTER);

        pnlChart.validate();
    }
    private void nextStep(){
        try {
                soundMaker.setVolumeLevel(exam.getCurentVolumeLevel());
                soundMaker.setfFreq(exam.getCurrentFreq());
                soundMaker.setCurrentChanel(exam.getCurentEar());
                soundMaker.play();
            } catch (LineUnavailableException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void play(){
        try {
                soundMaker.setVolumeLevel(this.sldVolume.getValue());
                soundMaker.setfFreq(this.sldFrequency.getValue());
                soundMaker.play();
            } catch (LineUnavailableException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    private void sldAgeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldAgeStateChanged
        this.lblAge.setText("Wiek: " + Integer.toString(this.sldAge.getValue()));
        exam.setAge(this.sldAge.getValue());
        exam.setUpLimitRange();
        exam.setDownLimitRange();
    }//GEN-LAST:event_sldAgeStateChanged

    private void btnCalibrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalibrationActionPerformed

    }//GEN-LAST:event_btnCalibrationActionPerformed

    private void btnRepeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepeatActionPerformed
        if(this.btnRepeat.getText()=="Odtwórz"){
            play();    
        }else{
            nextStep();
        }
        
    }//GEN-LAST:event_btnRepeatActionPerformed

    private void btnRefuseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefuseActionPerformed
        exam.incVolume();
        this.sldVolume.setValue((int)exam.getCurentVolumeLevel());
        this.sldFrequency.setValue((int)exam.getCurrentFreq());
        if(!exam.isComleted()){
            nextStep();
        }else{
            this.btnBeginExam.setText("Rozpocznij badanie");
            this.btnRepeat.setText("Odtwórz");
            this.sldFrequency.setEnabled(true);
            this.sldVolume.setEnabled(true);
            this.btnConfirm.setEnabled(false);
            this.btnRefuse.setEnabled(false);
            this.lblExamState.setText("Badanie skończone");
        }
        
        
    }//GEN-LAST:event_btnRefuseActionPerformed

    private void sldVolumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldVolumeStateChanged
        this.lblVolume.setText(Integer.toString(this.sldVolume.getValue()));
        if (soundMaker != null) {
            soundMaker.setVolumeLevel(this.sldVolume.getValue());
        }
    }//GEN-LAST:event_sldVolumeStateChanged

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        if (exam.getCurentEar() == -1) {
            exam.addLeftEarValue(exam.getCurrentFreq(), exam.getCurentVolumeLevel());
            lblEarInfo.setText("Badane ucho: Lewe");
        } else if (exam.getCurentEar() == 1) {
            exam.addRightEarValue(exam.getCurrentFreq(), exam.getCurentVolumeLevel());
            lblEarInfo.setText("Badane ucho: Prawe");
        } else {
            exam.addRightEarValue(exam.getCurrentFreq(), exam.getCurentVolumeLevel());
            exam.addLeftEarValue(exam.getCurrentFreq(), exam.getCurentVolumeLevel());
        }
        exam.incFrequency();
        exam.setCurentVolumeLevel(10);
        this.sldVolume.setValue((int)exam.getCurentVolumeLevel());
        this.sldFrequency.setValue((int)exam.getCurrentFreq());

        if(!exam.isComleted()){
            nextStep();
        }else{
            this.btnBeginExam.setText("Rozpocznij badanie");
            this.btnRepeat.setText("Odtwórz");
            this.sldFrequency.setEnabled(true);
            this.sldVolume.setEnabled(true);
            this.btnConfirm.setEnabled(false);
            this.btnRefuse.setEnabled(false);
            this.lblExamState.setText("Badanie skończone");
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void btnBeginExamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBeginExamActionPerformed
        // exam = new Exam(this.txtExamName.getText(), this.sldAge.getValue());
        if (this.btnBeginExam.getText()=="Rozpocznij badanie"){
            this.btnBeginExam.setText("Zakończ badanie");
            this.btnConfirm.setEnabled(true);
            this.btnRefuse.setEnabled(true);
            
            this.sldFrequency.setEnabled(false);
            this.sldVolume.setEnabled(false);
            this.btnRepeat.setText("Powtórz");
            
        }else{
            this.btnBeginExam.setText("Rozpocznij badanie");
            this.btnRepeat.setText("Odtwórz");
            this.sldFrequency.setEnabled(true);
            this.sldVolume.setEnabled(true);
            this.btnConfirm.setEnabled(false);
            this.btnRefuse.setEnabled(false);
        }
        this.sldVolume.setValue((int)exam.getCurentVolumeLevel());
        this.sldFrequency.setValue((int)exam.getCurrentFreq());

        nextStep();
    }//GEN-LAST:event_btnBeginExamActionPerformed

    private void sldFrequencyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldFrequencyStateChanged
        this.lblFreq.setText(Integer.toString(this.sldFrequency.getValue()));
        if (soundMaker != null) {
            soundMaker.setfFreq(this.sldFrequency.getValue());
        }
    }//GEN-LAST:event_sldFrequencyStateChanged

    private void btnCalibrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCalibrationMouseClicked
        jDialogCalibration.setLocationRelativeTo(this);
        jDialogCalibration.setVisible(true);
    }//GEN-LAST:event_btnCalibrationMouseClicked

    private void btmPlayHandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmPlayHandsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btmPlayHandsActionPerformed

    private void btmPlayHandsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btmPlayHandsMouseClicked
        playSound();
    }//GEN-LAST:event_btmPlayHandsMouseClicked

    private void jButtonCloseCalibrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonCloseCalibrationMouseClicked
        jDialogCalibration.dispose();
    }//GEN-LAST:event_jButtonCloseCalibrationMouseClicked

    private void spnFreqCoefPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_spnFreqCoefPropertyChange
        if(exam!=null){
            exam.setFreqCoef((int)this.spnFreqCoef.getValue());
        }
    }//GEN-LAST:event_spnFreqCoefPropertyChange

    private void spnVolCoefStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnVolCoefStateChanged
        if(exam!=null){
            exam.setVolCoef((int)this.spnVolCoef.getValue());
        }
    }//GEN-LAST:event_spnVolCoefStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    void playSound() {
        try {
            InputStream inputStream = getClass().getResourceAsStream("./handcalibration.wav");
            //System.out.println("elo");
            AudioStream audioStream = new AudioStream(inputStream);
            AudioPlayer.player.start(audioStream);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    void printMixersDetails() {
        javax.sound.sampled.Mixer.Info[] mixers = AudioSystem.getMixerInfo();
        System.out.println("There are " + mixers.length + " mixer info objects");
        for (int i = 0; i < mixers.length; i++) {
            Mixer.Info mixerInfo = mixers[i];
            System.out.println("Mixer Name:" + mixerInfo.getName());
            Mixer mixer = AudioSystem.getMixer(mixerInfo);
            Line.Info[] lineinfos = mixer.getTargetLineInfo();
            for (Line.Info lineinfo : lineinfos) {
                System.out.println("line:" + lineinfo);
                try {
                    Line line = mixer.getLine(lineinfo);
                    line.open();
                    if (line.isControlSupported(FloatControl.Type.VOLUME)) {
                        FloatControl control = (FloatControl) line.getControl(FloatControl.Type.VOLUME);
                        System.out.println("Volume:" + control.getValue());
                        JProgressBar pb = new JProgressBar();
                        control.setValue((float) 0.5);
                        int value = (int) (control.getValue() * 100);
                        pb.setValue(value);
                        jDialogCalibration.add(new JLabel(lineinfo.toString()));
                        jDialogCalibration.add(pb);
                        jDialogCalibration.pack();
                    }
                } catch (LineUnavailableException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btmPlayHands;
    private javax.swing.JButton btnBeginExam;
    private javax.swing.JButton btnCalibration;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnRefuse;
    private javax.swing.JButton btnRepeat;
    private javax.swing.JButton jButtonCloseCalibration;
    private javax.swing.JDialog jDialogCalibration;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblEarInfo;
    private javax.swing.JLabel lblExamState;
    private javax.swing.JLabel lblFreq;
    private javax.swing.JLabel lblVolume;
    private javax.swing.JPanel pnlChart;
    private javax.swing.JPanel pnlExam;
    private javax.swing.JSlider sldAge;
    private javax.swing.JSlider sldFrequency;
    private javax.swing.JSlider sldVolume;
    private javax.swing.JSpinner spnFreqCoef;
    private javax.swing.JSpinner spnVolCoef;
    private javax.swing.JTabbedPane tpnOptions;
    private javax.swing.JTextField txtExamName;
    // End of variables declaration//GEN-END:variables
}
